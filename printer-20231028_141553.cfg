[include shell_command.cfg]
[include fluidd.cfg]
#####################################################################
## For KAMP (klipper Adaptive Bed Leveling - and purging)
#####################################################################
[include KAMP_Settings.cfg]
[include ./KAMP/Adaptive_Meshing.cfg]
[include ./KAMP/Line_Purge.cfg]
[include ./KAMP/Voron_Purge.cfg]
[include ./KAMP/Smart_Park.cfg]
[include stealthburner_leds] #### Stealthburner LED routines ####
[virtual_sdcard]
path:/home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

#####################################################################
##  Thermistor Definition                                          ##
#####################################################################
[thermistor Trianglelab-NTC100K-B3950]
temperature1: 25
resistance1: 103180
temperature2: 150
resistance2: 1366.2
temperature3: 250
resistance3: 168.6

[thermistor ATC Semitec 104GT-2]
temperature1: 20
resistance1: 126800
temperature2: 150
resistance2: 1360
temperature3: 300
resistance3: 80.65


#####################################################################
#MCU's
#####################################################################
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_310011001750344D30353320-if00

[mcu can0]
canbus_uuid: bfd10b3792a2
## Obtain by "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py" can0 ##
## troubleshooting CANbus "ip -s link show can0" shows traffic, "lsusb" shows usb connected 


#####################################################################
## Exclude list for Adaptive Bed Mesh and Purge
#####################################################################
[exclude_object]

#####################################################################
## Basic Printer definitions
#####################################################################
[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000             #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################
##  B Stepper - Left
##  Connected to MOTOR_0
##  Virtual Endstop
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 400  #set to 200 for 1.8 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 1
position_endstop: 300
position_max: 300
homing_speed: 40
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC4
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6
driver_SGTHRS: 125

##  A Stepper - Right
##  Connected to MOTOR_1
##  Virtual Endstop
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 400  #set to 200 for 1.8 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 1
position_endstop: 300
position_max: 300
homing_speed: 40  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 130

#####################################################################
#   Z Stepper Settings
#####################################################################
##  Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Virtual Endstop
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
rotation_distance: 4    # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
full_steps_per_rotation: 200
endstop_pin: probe:z_virtual_endstop
position_min: -10
position_max: 225
homing_speed: 7.5 # Leadscrews are slower than 2.4, 10 is a recommended max. Jan 30th moved from 8 to 10
second_homing_speed: 3
homing_retract_dist: 3
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: False
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0
driver_SGTHRS: 45

[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 4  # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
full_steps_per_rotation: 200
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: False
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
rotation_distance: 4  # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
full_steps_per_rotation: 200
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: False
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
##   BOARD PINS - defines pin aliases on EBB36 for config usage.   ##
#####################################################################

[board_pins EBB36_G0B1_v1.2] 
mcu: can0
aliases:
aliases_step:
    EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_TAP: # these are preferred for endstops (including klicky)
    TAP_3=PB7,TAP_2=PB5,TAP_1=PB6
aliases_bltouch: # these are the dupont connectors for bltouch
    PROBE_1=PB9,PROBE_2=PB8
aliases_fans:
    FAN0=PA1,FAN1=PA0
aliases_thermistors:
    TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters:
    HE0=PB13
aliases_rgb:
    RGBLED=PD3
aliases_adxl:
    ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c:
    AUX0=PB3,AUX1=PB4

#####################################################################
## Define ADXL345 for input shaping                                ##
#####################################################################

[adxl345]
cs_pin: can0:ADXL_CS
spi_software_sclk_pin: can0:ADXL_SCLK
spi_software_mosi_pin: can0:ADXL_MOSI
spi_software_miso_pin: can0:ADXL_MISO
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    150,150,20 

#####################################################################
#   Extruder
#####################################################################
[extruder]
step_pin: can0:EXT_STEP
dir_pin: !can0:EXT_DIR  
enable_pin: !can0:EXT_EN
rotation_distance: 4.637
gear_ratio: 7.5:1    #CW2 = 50:8 
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 120
max_extrude_only_accel: 1500
max_extrude_cross_section: 5
nozzle_diameter: 0.40
filament_diameter: 1.750
heater_pin: can0:HE0
sensor_pin: can0:TH0
sensor_type: ATC Semitec 104GT-2 
pullup_resistor: 2200            
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 1
max_temp: 350

## EXTRUDER MOTOR
[tmc2209 extruder]
uart_pin: can0:EXT_UART
interpolate: true
sense_resistor: 0.11
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4
run_current: 0.85

[firmware_retraction]
retract_length: 1
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 40
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0.2
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 20
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

#####################################################################
##   Bed                                                           ##
#####################################################################
[heater_bed]
##  SSR Pin - HE1
##  Thermistor - TB
heater_pin: PA2
## See https://www.klipper3d.org/Config_Reference.html#common-thermistors for thermistor types. ##
sensor_type: Generic 3950  #Trianglelab-NTC100K-B3950  ##ATC Semitec 104NT-4-R025H42G
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
max_power: 1
min_temp: 1
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

[verify_heater heater_bed]
max_error: 150
check_gain_time: 120

[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 260,260
fade_start: 1
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
mesh_pps: 2, 3
bicubic_tension: 0.2

#####################################################################
##   Fan Control                                                   ##
#####################################################################
[fan]
##  Print Cooling Fan 
pin: can0:FAN1
kick_start_time: 0.25
cycle_time: 0.15
off_below: 0.10

[heater_fan hotend_fan]
##  Hotend Fan
pin: can0:FAN0
max_power: 1.0
kick_start_time: 0.5
fan_speed: 0.6
heater: extruder
heater_temp: 60.0
##  If you are experiencing back flow, you can reduce fan_speed

[fan_generic controller_fan]
##  Controller fan - FAN2
pin: PA8
kick_start_time: 0.5
max_power: 1.0
off_below: 0.0
cycle_time: 0.010

[fan_generic exhaust_fan]
##  Exhaust fan - FAN3
pin: PD12
max_power: 1.0
kick_start_time: 0.5
off_below: 0.0
cycle_time: 0.010

##NEVERMORE FANS
[fan_generic Nevermore]
max_power: 1.0
pin: PD14
kick_start_time: 0.5
off_below: 0.0
cycle_time: 0.010

[fan_generic HEPA]
max_power: 1.0
pin: PD15
kick_start_time: 0.5
off_below: 0.0
cycle_time: 0.010

#[temperature_fan RaspberryPi]
#sensor_type: temperature_host #This is what the Pi's Temperature sensor is known as.
#pin: host:gpiochip1/gpio14 #PD15   #Set this to your fan pin
#max_temp: 80.0                #Set below 85C, Pi3+ MCU can be damaged at 85C
#target_temp: 45.0             #Set this to your preferred running temperature
#min_temp: 10
#shutdown_speed: 0.0
#kick_start_time: 0.5
#off_below: 0.19
#max_speed: 1.0
#min_speed: 0.0
#control: pid
#pid_Kp: 2.0
#pid_Ki: 5.0
#pid_Kd: 0.5
#pid_deriv_time: 2.0

#####################################################################
##   LED Controls                                                  ##
#####################################################################
[neopixel headlight]
## Stealthburner lighting - RGB_LED
pin: can0:RGBLED
chain_count: 3
color_order: RGB
initial_RED: 0.14
initial_GREEN: 0.25
initial_BLUE: 0.16
#initial_WHITE: 0.0

[neopixel caselight]
pin: PB0
chain_count: 50
color_order: GRB
initial_GREEN: 0.14
initial_RED: 0.25
initial_BLUE: 0.16

#####################################################################
## 	Additional Sensors                                             ##
#####################################################################

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[temperature_sensor CANBOARD]
sensor_type: temperature_mcu
sensor_mcu: can0
min_temp: 15
max_temp: 100

##Chamber Thermistor##
[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF5
min_temp: 15
max_temp: 100
gcode_id: chamber_th

[temperature_sensor RaspberryPi]
sensor_type: temperature_host

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5a
   
#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################
[gcode_macro HOME]
gcode:
    G90
    # Home Z
    G1 X150 Y150
    G28 Z0
    G1 Z10 F1200
    # Home Y
    G28 Y0
    G1 Y5 F1200
    # Home X
    G4 P200
    G28 X0
    G1 X5 F1200
#___________________________________________

[idle_timeout]
timeout: 1800
#####################################################################
##  Homing
#####################################################################
[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position: 150,150
speed:100
z_hop:10
#####################################################################
##  Leveling
#####################################################################
[z_tilt]
##  Use Z_TILT_ADJUST to level the bed .
##  z_positions: Location of toolhead
z_positions:
   -50, 18
   150, 348
   350, 18
points:
   30, 5
   150, 245
   270, 5

speed: 200
horizontal_move_z: 20
retries: 5
retry_tolerance: 0.0045
#####################################################################
##  Voron_Tap
#####################################################################
[probe]
pin: !can0: TAP_1
x_offset: 0
y_offset: 0
speed: 10
samples: 3
samples_result: average
sample_retract_dist: 2.0
samples_tolerance: 0.080
samples_tolerance_retries: 8
#retry_tolerance: 0.0099

##  Activate Tap
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}
    
#####################################################################
#   Displays
#####################################################################
##               __Using system config for display__               ##
#####################################################################
#####################################################################
#####################################################################
#   Macros
#####################################################################

#####################################################################
##  G-Code Logging to console
#####################################################################
[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".
[pause_resume]

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    #{% set X = params.X|default(150)|float %}
    #{% set Y = params.Y|default(0)|float %}
    #{% set Z = params.Z|default(15)|float %}
    {% set X = 290|float %}
    {% set Y = 290|float %}
    {% set Z = 40|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
## Multi Material Macros
######################################################################
[gcode_macro M900]
gcode:
    #default_parameter_K: 0 gcode : SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro T0]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder
   

[gcode_macro T1]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder


#####################################################################
##  print_start macro
#####################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28  XY                 # Full home (XYZ)
  G0 X150 Y150
  G28  Z
  G0 Z30
  G90                   # Absolut position

  ##  First Bed Mesh
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
#    M106 S255                                           # Turns on the PT-fan

    ##  Nevermore startup
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 2min"                # Displays info
    G4 P120000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heat nozzle up to target temp
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  Smart_Park                                                    # Activates KAMP's Smart Park function
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Begin printing"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro SENSOR_HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
#_________________________________________________________________

[gcode_macro SENSOR_HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
#__________________________________________________________________

[gcode_macro SENSOR_HOME_Z]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set RUN_CURRENT_Z = printer.configfile.settings['tmc2209 stepper_z'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={HOME_CURRENT}

    # Home
    G28 Z
    # Move away
    G91
    G1 Z-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Z}
#__________________________________________________________________

[gcode_macro SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}
#__________________________________________________________________
[gcode_macro REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}
#________________________________________________________________

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
#________________________________________________________________

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}
#________________________________________________________________

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  #_______________________________________________________________

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
#_______________________________________________________________

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    #M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    #M300
    #M300
    RESTORE_GCODE_STATE NAME=load_state
#____________________________________________________________

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    #M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    #M300
    #M300
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_shell_command backup_cfg]
command: /usr/bin/bash /home/pi/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 56.909
#*# pid_ki = 2.040
#*# pid_kd = 396.942
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.858
#*# pid_ki = 2.143
#*# pid_kd = 55.739
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 55.2
#*# shaper_type_y = mzv
#*# shaper_freq_y = 40.2
#*#
#*# [probe]
#*# z_offset = -1.375
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.076875, 0.111458, 0.045417, -0.010000, -0.039583
#*# 	  0.123958, 0.095208, 0.038958, -0.060208, -0.130208
#*# 	  0.175833, 0.101042, -0.011042, -0.125833, -0.205000
#*# 	  0.242708, 0.139583, 0.011458, -0.154375, -0.313542
#*# 	  0.309583, 0.140833, -0.016875, -0.222500, -0.434167
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 3
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 260.0
#*# min_y = 40.0
#*# max_y = 260.0
